from flask import Flask, request, jsonify
from openai import OpenAI
import os

app = Flask(__name__)

# Load secrets from environment or directly
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    organization=os.getenv("OPENAI_ORG_ID"),
    project=os.getenv("OPENAI_PROJECT_ID")
)

@app.route("/ask-mr-shaw", methods=["POST"])
def ask_mr_shaw():
    data = request.json
    question = data.get("question", "").strip()
    mine_type = data.get("mine_type", "").strip()

    if not question:
        return jsonify({"error": "Missing question"}), 400

    if not mine_type:
        return jsonify({"error": "Missing mine type"}), 400

    # Regulatory filter logic
    if "Part 46" in mine_type:
        allowed_cfr = "Only cite regulations from 30 CFR Part 46. Do not include references to Part 48 or Part 56."
    elif "Underground" in mine_type:
        allowed_cfr = "Only cite regulations from 30 CFR Part 48 Subpart A. Do not include references to Part 46 or Part 56."
    else:
        allowed_cfr = "Only cite regulations from 30 CFR Part 48 Subpart B. Do not include references to Part 46 or Part 56."

    system_prompt = f"""
You are Mr. Shaw, a certified MSHA instructor with 30+ years of field experience. Respond using official CFR standards only.

Use this format:
------------------------------
üü¶ **Module Title: [Insert Topic]**

### üìç What to Do or Where to File
- Clear bullet list of steps
- Link to [MSHA.gov](https://www.msha.gov) if needed

### üìù Information Needed
- Bullet list of records, documentation, or proof

üìò **CFR Reference**: Include relevant CFR citations

------------------------------
The miner works under: {mine_type}.
{allowed_cfr}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ]
        )
        answer = response.choices[0].message.content.strip()
        return jsonify({"answer": answer})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)
